/*
  Button
 Turns on and off a light emitting diode(LED) connected to digital
 pin 13, when pressing a pushbutton attached to pin 2.
 The circuit:
 * LED attached from pin 13 to ground
 * pushbutton attached to pin 2 from +5V
 * 10K resistor attached to pin 2 from ground
 * Note: on most Arduinos there is already an LED on the board
 attached to pin 13.
 created 2005
 by DojoDave <http://www.0j0.org>
 modified 30 Aug 2011
 by Tom Igoe
 This example code is in the public domain.
 http://www.arduino.cc/en/Tutorial/Button
 */

// constants won't change. They're used here to
// set pin numbers:
const int buttonPin = 2;     // the number of the pushbutton pin
const int ledPin =  13;      // the number of the LED pin

// variables will change:
int buttonState = 0;         // variable for reading the pushbutton status

// neopixels below here
#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

#define PIN 6
#define NUMPIXELS      128

// Parameter 1 = number of pixels in strip
// Parameter 2 = Arduino pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
//   NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)
// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
// Note that for older NeoPixel strips you might need to change the third parameter--see the strandtest
// example for more information on possible values.
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

int delayval = 500; // delay for half a second

long randNumberR;
long randNumberG;
long randNumberB;

void setup() {
  // initialize the LED pin as an output:
  pinMode(ledPin, OUTPUT);
  // initialize the pushbutton pin as an input:
  pinMode(buttonPin, INPUT);

    // This is for Trinket 5V 16MHz, you can remove these three lines if you are not using a Trinket
  #if defined (__AVR_ATtiny85__)
    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  // End of trinket special code


  pixels.begin();
  pixels.show(); // Initialize all pixels to 'off'
}

void loop() {
  randomSeed(analogRead(0));
  // read the state of the pushbutton value:
  buttonState = digitalRead(buttonPin);
int i = 0;
  // check if the pushbutton is pressed.
  // if it is, the buttonState is HIGH:
  if (buttonState == HIGH) {
    // turn LED on:

  randNumberR = random(10, 255);
  randNumberG = random(255, 190);
  randNumberB = random(100, 70);
  randNumberB = random(10, 30);
  
    // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    pixels.setPixelColor(0, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(1, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(2, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(3, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(4, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(5, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(6, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(7, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(8, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(9, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(10, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(11, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(12, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(13, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(14, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.
    pixels.setPixelColor(15, pixels.Color(randNumberR,randNumberG,randNumberB)); // Moderately bright green color.

    pixels.show(); // This sends the updated pixel color to the hardware.

    delay(delayval); // Delay for a period of time (in milliseconds).


  }
 else {
    // turn LED off:
    digitalWrite(ledPin, LOW);
    pixels.setPixelColor(0, pixels.Color(0,0,0)); // Moderately bright green color.
    pixels.setPixelColor(2, pixels.Color(0,0,0)); // Moderately bright green color.
    pixels.setPixelColor(4, pixels.Color(0,0,0)); // Moderately bright green color.
    pixels.setPixelColor(6, pixels.Color(0,0,0)); // Moderately bright green color.
    pixels.setPixelColor(8, pixels.Color(0,0,0)); // Moderately bright green color.
    pixels.setPixelColor(10, pixels.Color(0,0,0)); // Moderately bright green color.
    pixels.setPixelColor(12, pixels.Color(0,0,0)); // Moderately bright green color.
    pixels.setPixelColor(14, pixels.Color(0,0,0)); // Moderately bright green color.

    pixels.show(); // This sends the updated pixel color to the hardware.

  }
}
